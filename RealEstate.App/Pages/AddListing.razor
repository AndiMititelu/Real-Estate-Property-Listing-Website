@page "/addlisting/{propertyId}"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels
@using static RealEstate.App.Enums


<h3 class="text-center mb-4">@((Property != null && !string.IsNullOrWhiteSpace(Property.Title)) ? Property.Title : "Loading...")</h3>

@if (Property == null)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}

else 
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title">Property Details</h5>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Title:</dt>
                <dd class="col-sm-9">@Property.Title</dd>
                <dt class="col-sm-3">Description:</dt>
                <dd class="col-sm-9">@Property.Description</dd>
                <dt class="col-sm-3">City:</dt>
                <dd class="col-sm-9">@Property.City</dd>
                <dt class="col-sm-3">Address:</dt>
                <dd class="col-sm-9">@Property.StreetAddress</dd>
                <dt class="col-sm-3">Size:</dt>
                <dd class="col-sm-9">@Property.Size</dd>
                <dt class="col-sm-3">Bedrooms:</dt>
                <dd class="col-sm-9">@Property.NumberOfBedrooms</dd>
                <dt class="col-sm-3">Bathrooms:</dt>
                <dd class="col-sm-9">@Property.NumberOfBathrooms</dd>
            </dl>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title">Property Photos</h5>
        </div>
        <div class="card-body">
            <div class="row">
                @if (Property != null && Property.Images.Any())
                {
                    @foreach (var image in Property.Images)
                    {
                        <div class="col-md-3 mb-3">
                            <img src="@($"data:image/png;base64,{Convert.ToBase64String(image)}")" class="img-fluid rounded" alt="Property Photo" />
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No photos available</p>
                }
            </div>
        </div>
    </div>

    <EditForm Model="@listingViewModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title">Listing Details</h5>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="status">Status:</label>
                    <InputSelect id="status" @bind-Value="listingViewModel.PropertyStatus" class="form-control">
                        @foreach (var status in Enum.GetValues(typeof(Status)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => listingViewModel.PropertyStatus)" />
                </div>

                <div class="form-group">
                    <label for="price">Price:</label>
                    <InputNumber id="price" @bind-Value="listingViewModel.Price" class="form-control" />
                    <ValidationMessage For="@(() => listingViewModel.Price)" />
                </div>

                <div class="form-group">
                    <button type="button" class="btn btn-success">Predict Price</button>
                </div>
            </div>
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-primary">Submit</button>
            <button type="button" class="btn btn-secondary ml-2" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public string PropertyId { get; set; }

    [Inject]
    public IListingDataService ListingDataService { get; set; }

    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public ListingViewModel listingViewModel { get; set; } = new ListingViewModel();
    public PropertyViewModel Property { get; set; }
    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(PropertyId, out Guid propertyId))
        {
            Property = await PropertyDataService.GetPropertyByIdAsync(propertyId);
            listingViewModel.PropertyId = propertyId;
            listingViewModel.Title = Property.Title;
            listingViewModel.UserName = Property.UserId;
        }
        else
        {
            ErrorMessage = "Invalid PropertyId parameter.";
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = await ListingDataService.CreateListingAsync(listingViewModel);
        if (result.IsSuccess)
        {
            ErrorMessage = "Listing created successfully";
            await InvokeAsync(() => NavigationManager.NavigateTo("/listingsoverview"));
        }
        else
        {
            ErrorMessage = result.Message;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/listingoverview");
    }
}

@page "/addlisting/{propertyId}"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels
@using static RealEstate.App.Enums


<h3>Add Listing</h3>

@if (ErrorMessage != null)
{
    <p class="text-danger">@ErrorMessage</p>
}

@if (Property != null)
{
    <h4>Property Details</h4>
    <dl class="row">
        <dt class="col-sm-3">Title:</dt>
        <dd class="col-sm-9">@Property.Title</dd>
        
        <!-- Add more property details as needed -->
    </dl>
}

<EditForm Model="@listingViewModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="form-group">
        <label for="title">Listing Title:</label>
        <InputText id="title" @bind-Value="listingViewModel.Title" class="form-control" />
        <ValidationMessage For="@(() => listingViewModel.Title)" />
    </div>

    <div class="form-group">
        <label for="status">Status:</label>
        <InputSelect id="status" @bind-Value="listingViewModel.PropertyStatus" class="form-control">
            @foreach (var status in Enum.GetValues(typeof(Status)))
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => listingViewModel.PropertyStatus)" />
    </div>

    <div class="form-group">
        <label for="price">Price:</label>
        <InputNumber id="price" @bind-Value="listingViewModel.Price" class="form-control" />
        <ValidationMessage For="@(() => listingViewModel.Price)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-info ms-2">
        @ErrorMessage
    </div>
}

@code {

    [Parameter]
    public string PropertyId { get; set; }

    [Inject]
    public IListingDataService ListingDataService { get; set; }

    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public ListingViewModel listingViewModel { get; set; } = new ListingViewModel();
    public PropertyViewModel Property { get; set; }
    public string ErrorMessage { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(PropertyId, out Guid propertyId))
        {
            // Fetch property details from the PropertyId
            Property = await PropertyDataService.GetPropertyByIdAsync(propertyId);

            // Assign the PropertyId to the listingViewModel
            listingViewModel.PropertyId = propertyId;
        }
        else
        {
            // Handle the case where the PropertyId parameter is not a valid GUID
            // You can log an error or display a message to the user
            ErrorMessage = "Invalid PropertyId parameter.";
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = await ListingDataService.CreateListingAsync(listingViewModel);
        if (result.IsSuccess)
        {
            ErrorMessage = "Listing created successfully";
            Console.WriteLine("MESAJ INAINTE: " + ErrorMessage);

            // Schedule the navigation on the next render cycle
            await InvokeAsync(() => NavigationManager.NavigateTo("/propertyoverview"));
        }
        else
        {
            ErrorMessage = result.Message;
            Console.WriteLine("Error Message: " + ErrorMessage); // Add this line to check the error message
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/listingoverview");
    }
}

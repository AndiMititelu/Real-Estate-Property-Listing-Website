@page "/addproperty"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels
@using System.Net.Http.Headers
@using static RealEstate.App.Enums

<style>
    body {
        background-color: #f5f5f5;
        font-family: Arial, sans-serif;
    }

    .container {
        max-width: 600px;
        margin: auto;
        padding: 30px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        color: #333;
        font-weight: bold;
    }

    .form-control {
        border: 2px solid #007bff;
        border-radius: 5px;
        color: #333;
        background-color: #fff;
        padding: 10px;
        width: 100%;
    }

    .btn-success {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .btn-success:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
        color: white;
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .upload-icon {
        color: #007bff;
        font-size: 24px;
    }

    #fileUpload {
        display: none;
    }

    .alert {
        margin-top: 20px;
        padding: 10px;
        border-radius: 5px;
    }

    .alert-info {
        background-color: #007bff;
        color: white;
    }
</style>



<CascadingValue Value="editContext">
    <div class="container">
        <h3>Add a new property</h3>

        <form @onsubmit="HandleValidSubmit">

            <div class="form-group">
                <label for="title" class="form-label">Property title:</label>
                <input id="title" class="form-control" @bind="@PropertyViewModel.Title" placeholder="Enter property name">
            </div>


            <div class="form-group">
                <label for="description" class="form-label">Description:</label>
                <textarea id="description" class="form-control" @bind="@PropertyViewModel.Description" placeholder="Enter property description"></textarea>
            </div>


            <div class="form-group">
                <label for="city" class="form-label">City:</label>
                <input id="city" class="form-control" @bind="@PropertyViewModel.City" placeholder="Enter city">
            </div>

            <div class="form-group">
                <label for="streetaddress" class="form-label">Address:</label>
                <input id="streetaddress" class="form-control" @bind="@PropertyViewModel.StreetAddress" placeholder="Enter property address">
            </div>

            <div class="form-group">
                <label for="size" class="form-label">Size:</label>
                <input id="size" class="form-control" @bind="@PropertyViewModel.Size">
            </div>

            <div class="form-group">
                <label for="numberOfBedrooms" class="form-label">Number of Bedrooms:</label>
                <input id="numberOfBedrooms" class="form-control" @bind="@PropertyViewModel.NumberOfBedrooms">
            </div>

            <div class="form-group">
                <label for="numberOfBathrooms" class="form-label">Number of Bathrooms:</label>
                <input id="numberOfBathrooms" class="form-control" @bind="@PropertyViewModel.NumberOfBathrooms">
            </div>

            <div class="form-group">
                <label for="images" class="form-label">Images:</label>
                <InputFile id="images" multiple OnChange="@OnInputFileChange">
                    <i class="fas fa-file-upload"></i>
                </InputFile>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-success me-2">Save property</button>
            </div>
        </form>


        @if (!string.IsNullOrWhiteSpace(Message))
        {
            <div class="alert alert-info">
                @Message
            </div>
        }
    </div>
</CascadingValue>


@if (!string.IsNullOrWhiteSpace(Message))
{
    <div class="alert alert-info ms-2">
        @Message
    </div>
}


@code {
    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    //[Inject]
    //public IListingDataService ListingDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public PropertyViewModel PropertyViewModel { get; set; } = new PropertyViewModel();

    public PropertyViewModel Property { get; set; }

    //public ListingViewModel ListingViewModel { get; set; } = new ListingViewModel();

    public string Message { get; set; }

    private const long maxFileSize = 10485760; // 10 MB

    private EditContext editContext;



    protected override void OnInitialized()
    {
        // Create EditContext
        editContext = new EditContext(PropertyViewModel);
    }


    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit method TRIGGERED");

        var result = await PropertyDataService.CreatePropertyAsync(PropertyViewModel);
        if (result.IsSuccess)
        {
            Message = "Property created successfully";
            NavigationManager.NavigateTo("/myproperties");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 10; // Set this to the maximum number of files you want to allow
        var files = e.GetMultipleFiles(maxAllowedFiles);

        foreach (var file in files)
        {
            if (file.Size <= maxFileSize)
            {
                // You can process each file here if needed, such as resizing or converting them
                PropertyViewModel.ImagesFiles.Add(file);
            }
            else
            {
                Console.WriteLine($"{file.Name} is too large. Max file size is {maxFileSize} bytes.");
            }
        }
    }


}

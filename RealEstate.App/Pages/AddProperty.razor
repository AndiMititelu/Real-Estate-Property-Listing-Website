@page "/addproperty"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels
@using System.Net.Http.Headers

<style>
    .container {
        max-width: 600px;
        margin: auto;
        padding: 30px;
        background: #f8f9fa; /* Light grey background */
        border-radius: 10px;
    }

    .row {
        margin-bottom: 20px;
    }

    .form-label {
        color: #495057; /* Dark text color for contrast */
    }

    .form-control {
        border: 2px solid #3498db; /* Blue accent */
        border-radius: 5px;
        color: #495057; /* Dark text color for contrast */
        background: #ffffff; /* White background */
    }

    .btn-success {
        background-color: #28a745; /* Green accent */
        border: none;
        color: white;
        padding: 10px 24px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        transition-duration: 0.4s;
        cursor: pointer;
    }

        .btn-success:hover {
            background-color: #218838; /* Darker green on hover */
        }

    .btn-secondary {
        background-color: #6c757d; /* Grey */
        border: 2px solid #5a6268; /* Darker grey border */
        color: #ffffff; /* White text color for contrast */
        padding: 10px 24px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        transition-duration: 0.4s;
        cursor: pointer;
    }

        .btn-secondary:hover {
            background-color: #5a6268; /* Darker grey on hover */
        }

    .upload-icon {
        color: #3498db; /* Blue accent for the upload icon */
    }

    /* Additional modern styles */
    h3 {
        color: #007bff; /* Blue heading color */
        margin-bottom: 30px;
    }
</style>


<h3>New Property</h3>

<EditForm Model="@PropertyViewModel" OnValidSubmit="@HandleValidSubmit">

    <DataAnnotationsValidator />
    <ValidationSummary></ValidationSummary>

    <div class="row mb-3 ms-2">
        <label for="title" class="col-sm-3 form-label">Property title:</label>
        <div class="col-sm-5">
            <InputText id="title" class="form-control" @bind-Value="@PropertyViewModel.Title" placeholder="Enter property name"></InputText>
            <ValidationMessage For="@(() => PropertyViewModel.Title)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="address" class="col-sm-3 form-label">Address:</label>
        <div class="col-sm-5">
            <InputText id="address" class="form-control" @bind-Value="@PropertyViewModel.Address" placeholder="Enter property address"></InputText>
            <ValidationMessage For="@(() => PropertyViewModel.Address)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="size" class="col-sm-3 form-label">Size:</label>
        <div class="col-sm-5">
            <InputNumber id="size" class="form-control" @bind-Value="@PropertyViewModel.Size"></InputNumber>
            <ValidationMessage For="@(() => PropertyViewModel.Size)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="price" class="col-sm-3 form-label">Price:</label>
        <div class="col-sm-5">
            <InputNumber id="price" class="form-control" @bind-Value="@PropertyViewModel.Price"></InputNumber>
            <ValidationMessage For="@(() => PropertyViewModel.Price)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="numberOfBedrooms" class="col-sm-3 form-label">Number of Bedrooms:</label>
        <div class="col-sm-5">
            <InputNumber id="numberOfBedrooms" class="form-control" @bind-Value="@PropertyViewModel.NumberOfBedrooms"></InputNumber>
            <ValidationMessage For="@(() => PropertyViewModel.NumberOfBedrooms)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="numberOfBathrooms" class="col-sm-3 form-label">Number of Bathrooms:</label>
        <div class="col-sm-5">
            <InputNumber id="numberOfBathrooms" class="form-control" @bind-Value="@PropertyViewModel.NumberOfBathrooms"></InputNumber>
            <ValidationMessage For="@(() => PropertyViewModel.NumberOfBathrooms)" />
        </div>
    </div>
    <div class="row mb-3 ms-2">
        <label for="images" class="col-sm-3 form-label">Images:</label>
        <div class="col-sm-5">
            <InputFile id="images" multiple OnChange="@OnInputFileChange">
                <i class="fas fa-upload upload-icon"></i> <!-- Fix for the upload icon -->
            </InputFile>
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <div class="col-sm-3"></div>
        <div class="col-sm-5">
            <button type="submit" class="btn btn-success me-2">Save property</button>
            <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </div>
</EditForm>

@if (!string.IsNullOrWhiteSpace(Message))
{
    <div class="alert alert-info ms-2">
        @Message
    </div>
}

@code {
    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public PropertyViewModel PropertyViewModel { get; set; } = new PropertyViewModel();

    public string Message { get; set; }

    private const long maxFileSize = 10485760; // 10 MB



    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"Title: {PropertyViewModel.Title}, UserId: {PropertyViewModel.UserId}, Address: {PropertyViewModel.Address}");

        var result = await PropertyDataService.CreatePropertyAsync(PropertyViewModel);
        if (result.IsSuccess)
        {
            Message = "Property created successfully";
            NavigationManager.NavigateTo("/propertyoverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 10; // Set this to the maximum number of files you want to allow
        var files = e.GetMultipleFiles(maxAllowedFiles);


        foreach (var file in files)
        {
            if (file.Size <= maxFileSize)
            {
                // You can process each file here if needed, such as resizing or converting them
                PropertyViewModel.ImagesFiles.Add(file);
            }
            else
            {
                Console.WriteLine($"{file.Name} is too large. Max file size is {maxFileSize} bytes.");
            }
        }
    }
    private void Cancel()
    {
        // Consider adding a confirmation dialog or message before navigating
        NavigationManager.NavigateTo("/propertyoverview");
    }
}

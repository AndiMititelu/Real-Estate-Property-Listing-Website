@page "/listingsoverview"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels
@using static RealEstate.App.Enums


<style scoped>
    .listing-container {
        border: 1px solid #eee;
        padding: 15px;
        border-radius: 5px;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

        .listing-container:hover {
            background-color: #e9ecef;
            transform: scale(1.02);
        }

    .thumbnail {
        max-width: 150px;
    }

    .title {
        font-size: 1.25em;
    }

    .price {
        font-size: 1.5em;
    }

    .info, .size {
        font-size: 1em;
    }
</style>

<div class="container mt-5">
    <h3>Listing Overview</h3>

    @if (isLoading)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
    else if (Listings != null && Listings.Any())
    {
        <!-- Filter and Sort buttons -->
        <div class="d-flex justify-content-between mb-3">
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="filterMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-filter"></i> Filter
                </button>
                <div class="dropdown-menu" aria-labelledby="filterMenuButton">
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="() => FilterListings(Status.ForRent)">
                        @if (currentFilter == Status.ForRent)
                        {
                            <i class="fas fa-check"></i>
                        }
                        For Rent
                    </a>
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="() => FilterListings(Status.ForSale)">
                        @if (currentFilter == Status.ForSale)
                        {
                            <i class="fas fa-check"></i>
                        }
                        For Sale
                    </a>
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="ResetFilters">Reset</a>

                </div>
            </div>



            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="sortMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-sort-amount-down"></i> Sort
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="sortMenuButton">
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="() => SortListingsByPrice(true)">Price Ascending</a>
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="() => SortListingsByPrice(false)">Price Descending</a>
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="() => SortListingsByDate()">Listing date</a>
                </div>
            </div>
        </div>

        @foreach (var listing in FilteredListings)
        {
            <div class="listing-container d-flex mb-4" @onclick="() => ViewListingDetails(listing.ListingId.ToString())" style="cursor: pointer;">
                <!-- Thumbnail image -->
                <div class="thumbnail-container mr-3">
                    <img src="@GetThumbnail(listing.PropertyId)" alt="Thumbnail" class="thumbnail img-fluid rounded">
                </div>

                <!-- Details -->
                <div class="details w-100">
                    <!-- Title and Price -->
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="title font-weight-bold">@listing.Title</div>
                        <div class="price text-success h4">
                            $@listing.Price
                            <span class="price-per-month" style="font-size: 0.8em;">@(listing.PropertyStatus == Status.ForRent ? "/month" : "")</span>
                        </div>
                    </div>

                    <!-- City and Last Updated -->
                    <div class="info text-muted">@GetLocation(listing.PropertyId) - Listed at: @listing.LastModifiedAt</div>

                    <!-- Size -->
                    <div class="size text-muted">Size: @GetSize(listing.PropertyId) mp²</div>
                </div>
            </div>
        }
    }
    else
    {
        <p>No listings available.</p>
    }

</div>


@code {
    [Inject]
    public IListingDataService ListingDataService { get; set; }

    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<ListingViewModel> Listings { get; set; }

    public List<ListingViewModel> FilteredListings { get; set; }

    public Status? currentFilter { get; set; }

    public List<PropertyViewModel> Properties { get; set; }

    public bool isLoading { get; set; } = true;


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        Listings = (await ListingDataService.GetListingsAsync()).ToList();
        FilteredListings = Listings.ToList();

        var propertyTasks = Listings.Select(listing => PropertyDataService.GetPropertyByIdAsync(listing.PropertyId));
        var propertyResults = await Task.WhenAll(propertyTasks);
        Properties = propertyResults.ToList();

        isLoading = false;
    }

    private string GetLocation(Guid propertyId)
    {
        var property = Properties.FirstOrDefault(p => p.PropertyId == propertyId);
        return property != null ? property.City : "Unknown";
    }


    private string GetThumbnail(Guid propertyId)
    {
        var property = Properties.FirstOrDefault(p => p.PropertyId == propertyId);
        if (property != null && property.Images != null && property.Images.Any())
        {
            // Convert the byte array to a base64 string
            var base64String = Convert.ToBase64String(property.Images[0]);
            return $"data:image/png;base64,{base64String}";
        }

        return "noimage.png"; 
    }

    private string GetSize(Guid propertyId)
    {
        var property = Properties.FirstOrDefault(p => p.PropertyId == propertyId);
        return property != null ? property.Size.ToString() : "Unknown";
    }

    private void ViewListingDetails(string listingId)
    {
        NavigationManager.NavigateTo($"/listingdetails/{listingId}");
    }


    private void SortListingsByPrice(bool ascending)
    {
        if (ascending)
        {
            FilteredListings = FilteredListings.OrderBy(l => l.Price).ToList();
        }
        else
        {
            FilteredListings = FilteredListings.OrderByDescending(l => l.Price).ToList();
        }
    }

    private void SortListingsByDate()
    {
        FilteredListings = FilteredListings.OrderByDescending(l => l.LastModifiedAt).ToList();
    }

    private void FilterListings(Status status)
    {
        currentFilter = status;
        FilteredListings = Listings.Where(listing => listing.PropertyStatus == status).ToList();
    }

    private void ResetFilters()
    {
        currentFilter = null;
        FilteredListings = Listings.ToList();
    }

}

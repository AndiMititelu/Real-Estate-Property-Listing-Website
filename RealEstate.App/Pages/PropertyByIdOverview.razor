@page "/propertydetails/{propertyId:guid}"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels

<h3>PropertyById</h3>

<br />

<p><input class="custom-checkbox" type="checkbox" id="includeHistory" @onchange="OnIncludeHistoryChanged" />   Include past events?</p>

@if (Property == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Property Title</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@Property.Title </td>
            </tr>
            <tr>
                <td>
                    <table class="nested-table ms-auto me-auto">
                        @*  <thead>
                    <tr>
                    <th>Event name</th>
                    <th class="category-event-header">Event date</th>
                    <th class="category-event-header">Artist</th>
                    <th class="category-event-header">Price</th>
                    </tr>
                    </thead> *@
                        <tbody>
                            @*  @foreach (var ev in Property.Events)
                        {
                        <tr>
                        <td class="event-name">@ev.Name </td>
                        <td class="event-date">@ev.Date.ToShortDateString() </td>
                        <td class="event-artist">@ev.Artist</td>
                        <td class="event-price">@ev.Price</td>
                        </tr>
                        } *@
                        </tbody>
                    </table>
                </td>
            </tr>
        </tbody>
    </table>
}


@code {
    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public Guid PropertyId { get; set; }

    public PropertyViewModel Property { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Property = await PropertyDataService.GetPropertyByIdAsync(PropertyId);
    }


    private Task OnIncludeHistoryChanged(ChangeEventArgs e)
    {
        throw new NotImplementedException();
    }
}

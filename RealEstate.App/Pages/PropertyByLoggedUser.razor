@page "/myproperties"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels
@inject IJSRuntime JSRuntime


<div class="container mt-5">
    <h3 class="text-center text-primary mb-4">Properties Owned by You</h3>

    @if (Properties == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else if (Properties.Count == 0)
    {
        <p class="alert alert-warning">You don't have any properties added yet.</p>
    }
    else
    {
        <div class="row">
            @foreach (var property in Properties)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        @if (property.Images.Any())
                        {
                            <img src="@($"data:image/png;base64,{Convert.ToBase64String(property.Images.First())}")" class="card-img-top" alt="Property Image" />
                        }
                        <div class="card-body">
                            <h5 class="card-title">@property.Title</h5>
                            <p class="card-text">@property.Address</p>
                            <p class="card-text text-primary">$@property.Price.ToString("N0")</p>
                            <button class="btn btn-primary btn-block" @onclick="() => ViewPropertyDetails(property.Title)">View Details</button>
                            <button class="btn btn-secondary btn-block" @onclick="() => UpdateProperty(property.Title)">Edit</button>
                            <button class="btn btn-danger btn-block" @onclick="() => DeleteProperty(property.Title)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    public List<PropertyViewModel> Properties { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Properties = (await PropertyDataService.GetPropertiesByCurrentUserAsync()).ToList();   
    }

    private void ViewPropertyDetails(string propertyTitle)
    {
        // Navigate to the "Find Property" page with the selected property's title
        NavigationManager.NavigateTo($"/findproperty/{propertyTitle}");
    }

    private void UpdateProperty(string propertyTitle)
    {
        NavigationManager.NavigateTo($"/updateproperty/{propertyTitle}");
    }

    private async Task DeleteProperty(string propertyTitle)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this property?");
        if (confirmed)
        {
            PropertyDataService.DeletePropertyAsync(propertyTitle);
        } 
    }
}

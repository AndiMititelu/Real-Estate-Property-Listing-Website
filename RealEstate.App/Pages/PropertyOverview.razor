@page "/propertyoverview"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels

<div class="container mt-5">
    <h3>Property Overview</h3>

   

    @if (Properties == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else if (Properties.Count == 0)
    {
        <p>No properties available.</p>
    }
    else
    {
        <div class="row">
            @foreach (var property in Properties)
            {
                <div class="col-md-6 mb-4">
                    <div class="card">
                        <div class="row no-gutters">
                            <div class="col-md-4">
                                <!-- Image preview -->
                                <img src="@($"data:image/png;base64,{Convert.ToBase64String(property.Images.FirstOrDefault())}")" alt="Property Image" class="card-img" />
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">@property.Title</h5>
                                    <p class="card-text">Location: @property.Address</p>
                                    <p class="card-text">Bedrooms: @property.NumberOfBedrooms</p>
                                    <p class="card-text">Price: $@property.Price.ToString("N0")</p>
                                    <button class="btn btn-primary" @onclick="() => ViewPropertyDetails(property.Title)">View Details</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<PropertyViewModel> Properties { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Properties = (await PropertyDataService.GetPropertiesAsync()).ToList();
    }

    private void OnIncludeHistoryChanged(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            NavigationManager.NavigateTo("/propertyoverview?includeHistory=true");
        }
        else
        {
            NavigationManager.NavigateTo("/propertyoverview");
        }
    }

    private void ViewPropertyDetails(string propertyTitle)
    {
        // Navigate to the "Find Property" page with the selected property's title
        NavigationManager.NavigateTo($"/findproperty/{propertyTitle}");
    }

}

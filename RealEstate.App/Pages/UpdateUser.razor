@page "/updateuser"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels
@inject ITokenService TokenService
@inject NavigationManager NavigationManager

<h3>Update User Information</h3>

@if (updateUserModel == null)
{
    <p>Loading...</p>
}
else
{
@*      <EditForm Model="@updateUserModel" OnValidSubmit="@HandleValidSubmit">
         <DataAnnotationsValidator />
         <ValidationSummary />

         <!-- Username -->
         <div class="form-group">
             <label for="username">Username:</label>
             <InputText id="username" class="form-control" @bind-Value="@updateUserModel.Username" disabled />
         </div>

         <!-- Name -->
         <div class="form-group">
             <label for="name">Name:</label>
             <InputText id="name" class="form-control" @bind-Value="@updateUserModel.Name" />
         </div>

         <!-- Email -->
         <div class="form-group">
             <label for="email">Email:</label>
             <InputText id="email" class="form-control" @bind-Value="@updateUserModel.Email" />
         </div>

         <!-- Phone Number -->
         <div class="form-group">
             <label for="phone">Phone Number:</label>
             <InputText id="phone" class="form-control" @bind-Value="@updateUserModel.PhoneNumber" />
         </div>

         <!-- UserRole -->
         @if (role == "Admin")
         {
             <div class="form-group">
                 <label for="userRole">User Role:</label>
                 <InputSelect id="userRole" class="form-control" @bind-Value="@updateUserModel.UserRole">
                     <option value="">Select a role</option>
                     @foreach (var role in Enum.GetNames(typeof(RealEstate.App.Enums.Role)))
                     {
                         <option value="@role">@role</option>
                     }
                 </InputSelect>
             </div>
         }

         <!-- Submit Button -->
         <button type="submit" class="btn btn-primary">Update User</button>
     </EditForm> *@

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-5 cool-form" style="margin-top:5rem;">
                <h3>Profile</h3>
                <div class="mb-3">
                    <label class="form-label cool-label">Username:</label>
                    <input class="form-control cool-input" @bind="updateUserModel.Username" />
                </div>

                <div class="mb-3">
                    <label class="form-label cool-label">Name:</label>
                    <input class="form-control cool-input" @bind="updateUserModel.Name" />
                </div>

                <div class="mb-3">
                    <label class="form-label cool-label">Email:</label>
                    <input class="form-control cool-input" @bind="updateUserModel.Email" />
                </div>
                <div class="column">
                    <button class="btn btn-primary cool-button" @onclick="UpdateProfile">Update Profile</button>
                    <button class="btn btn-primary cool-button" @onclick="Logout">Logout</button>
                </div>

                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="toast-container position-fixed bottom-0 end-0 p-3">
                        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <strong class="me-auto">Update Profile Error</strong>
                                <button type="button" class="btn-close" @onclick="DismissError" aria-label="Close"></button>
                            </div>
                            <div class="toast-body" style="color:red">
                                @error
                            </div>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(message))
                {

                    <div class="toast-container position-fixed bottom-0 end-0 p-3">
                        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <strong class="me-auto">Update Profile</strong>
                                <button type="button" class="btn-close" @onclick="DismissMessage" aria-label="Close"></button>
                            </div>
                            <div class="toast-body" style="color:green">
                                @message
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(message))
{
    <div class="alert alert-danger">
        @message
    </div>
}

@code {

    [Inject]
    public IUserService userService { get; set; }

    [Inject]
    public IAuthenticationService authService { get; set; }

    private UpdateUserViewModel updateUserModel = new UpdateUserViewModel();
    private string error;
    public string message { get; set; }

    private string role = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        string username = await TokenService.GetUsernameFromTokenAsync();
        UpdateUserViewModel foundUser = await userService.GetUser(username);
        role = await TokenService.GetRoleFromTokenAsync();
        //Console.WriteLine("AM GASIT asa: ", foundUser.Username);
        Console.WriteLine("Avem username asa totusi: ", username);
        if (!string.IsNullOrWhiteSpace(username) )
        {
            updateUserModel.Username = username;
            updateUserModel.Name = foundUser.Name;
            updateUserModel.Email = foundUser.Email;
        }
        else
        {
            Console.WriteLine("NUJ CE ARE FOUND USER");
        }

    }

    private async Task UpdateProfile()
    {
        // Check if the name is provided
        if (string.IsNullOrWhiteSpace(updateUserModel.Name))
        {
            message = "The name field is required.";
            Console.WriteLine(message); // This will print to the browser's console.
            StateHasChanged(); // This will refresh the UI to display the message.
            return;
        }

        try
        {
            Console.WriteLine("Attempting to update user..."); // Debug message
            updateUserModel.UserRole = "User";
            await userService.UpdateUser(updateUserModel);
            message = "User updated successfully!";
            Console.WriteLine(message); // Success message
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            //message = $"Error updating user: {ex.Message}";
            error = "Something went wrong updating the profile";
            //Console.WriteLine(message); // Error message
            StateHasChanged(); // This will refresh the UI to display the error message.
        }
    }
}

@functions
{
    private void DismissError()
    {
        error = null;
    }

    private void DismissMessage()
    {
        message = null;
    }

    private async Task Logout()
    {
        await authService.Logout();
        NavigationManager.NavigateTo("/login");
    }
}


@page "/updateuser"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels
@inject ITokenService TokenService
@inject NavigationManager NavigationManager

<style>
    .container {
        max-width: 960px;
        margin: auto;
        padding: 30px;
        background: rgba(255, 255, 255, 0.8); /* Semi-transparent white */
        border-radius: 10px;
    }

    .row {
        margin-bottom: 20px;
    }

    .form-label {
        color: #333; /* Dark text color for contrast */
    }

    .form-control {
        border: 2px solid #3498db; /* Blue accent */
        border-radius: 5px;
        color: #333; /* Dark text color for contrast */
        background: rgba(255, 255, 255, 0.8); /* Semi-transparent white */
    }

    .btn-primary {
        background-color: #3498db; /* Blue accent */
        border: none;
        color: white;
        padding: 10px 24px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        transition-duration: 0.4s;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: white;
        color: #3498db; /* Blue accent */
        border: 2px solid #3498db; /* Blue accent */
    }

    .avatar {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        margin: 10px auto;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #ccc; /* Placeholder color */
    }

        .avatar i {
            color: #333; /* Dark text color for contrast */
        }


</style>


@if (currentUserModel == null)
{
    <p>Loading...</p>
}
else
{

    <div class="container mt-5">
       

        <!-- Avatar -->
        <div class="avatar">
            <i class="fas fa-user fa-3x"></i>
        </div>


        <div class="row justify-content-center">
            <div class="col-md-5 cool-form" style="margin-top:5rem;">
                <h3>Profile</h3>
                <div class="mb-3">
                    <label class="form-label cool-label">Username:</label>
                    <input class="form-control cool-input" @bind="currentUserModel.Username" />
                </div>

                <div class="mb-3">
                    <label class="form-label cool-label">Name:</label>
                    <input class="form-control cool-input" @bind="currentUserModel.Name" />
                </div>

                <div class="mb-3">
                    <label class="form-label cool-label">Email:</label>
                    <input class="form-control cool-input" @bind="currentUserModel.Email" />
                </div>
                <div class="mb-3">
                    <label class="form-label cool-label">Phone number:</label>
                    <input class="form-control cool-input" @bind="currentUserModel.PhoneNumber" />
                </div>

                <div class="column">
                    <button class="btn btn-primary cool-button" @onclick="UpdateProfile">Update Profile</button>
                    <button class="btn btn-primary cool-button" @onclick="Logout">Logout</button>
                </div>

                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="toast-container position-fixed bottom-0 end-0 p-3">
                        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <strong class="me-auto">Update Profile Error</strong>
                                <button type="button" class="btn-close" @onclick="DismissError" aria-label="Close"></button>
                            </div>
                            <div class="toast-body" style="color:red">
                                @error
                            </div>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrEmpty(message))
                {

                    <div class="toast-container position-fixed bottom-0 end-0 p-3">
                        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <strong class="me-auto">Update Profile</strong>
                                <button type="button" class="btn-close" @onclick="DismissMessage" aria-label="Close"></button>
                            </div>
                            <div class="toast-body" style="color:green">
                                @message
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(message))
{
    <div class="alert alert-danger">
        @message
    </div>
}

@code {

    [Inject]
    public IUserService userService { get; set; }

    [Inject]
    public IAuthenticationService authService { get; set; }

    [Inject]
    public ITokenService tokenService { get; set; }

    private UserViewModel currentUserModel;
    private string error;
    public string message { get; set; }
    private string role = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetTokenAsync();
        var username = await authService.DecodeUsernameFromTokenAsync(token);
        if (!string.IsNullOrEmpty(username))
        {
            currentUserModel = await userService.GetUser(username);
        }
        
        Console.WriteLine("CurrentUserModel username BLAZOR: ", username);

    }

    private async Task UpdateProfile()
    {
        try
        {
            Console.WriteLine("Attempting to update user..."); // Debug message
            UserViewModel updateUser = new UserViewModel
                {
                    Username = currentUserModel.Username,
                    Email = currentUserModel.Email,
                    PhoneNumber = currentUserModel.PhoneNumber,
                    Name = currentUserModel.Name,
                    UserRole = currentUserModel.UserRole
                };

            var result = await userService.UpdateUser(updateUser);

            if (result.IsSuccess)
            {
                NavigationManager.NavigateTo($"/updateuser");
                await authService.Logout();
                NavigationManager.NavigateTo("/login");
            }

        }
        catch (Exception ex)
        {
            //message = $"Error updating user: {ex.Message}";
            error = "Something went wrong updating the profile";
            //Console.WriteLine(message); // Error message
            //StateHasChanged(); // This will refresh the UI to display the error message.
        }
    }
}

@functions
{
    private void DismissError()
    {
        error = null;
    }

    private void DismissMessage()
    {
        message = null;
    }

    private async Task Logout()
    {
        await authService.Logout();
        NavigationManager.NavigateTo("/login");
    }
}

